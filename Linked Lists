/*
Program: Add on queue and deleting a node in the linked list
*/

#include<stdio.h>
#include<stdlib.h>

struct node
{
    int data;
    struct node *next;
};

void add(struct node **head, int val)
{
    //create a new node
    struct node *newNode = malloc(sizeof(struct node));
    newNode->data = val;
    newNode->next     = NULL;

    //if head is NULL, it is an empty list
    if(*head == NULL)
         *head = newNode;
    //Otherwise, find the last node and add the newNode
    else
    {
        struct node *lastNode = *head;

        //last node's next address will be NULL.
        while(lastNode->next != NULL)
        {
            lastNode = lastNode->next;
        }

        //add the newNode at the end of the linked list
        lastNode->next = newNode;
    }

}

void delete(struct node **head, int key)
{
      //temp is used to freeing the memory
      struct node *temp;

      //key found on the head node.
      //move to head node to the next and free the head.
      if((*head)->data == key)
      {
          temp = *head;    //backup to free the memory
          *head = (*head)->next;
          free(temp);
      }
      else
      {
          struct node *current  = *head;
          while(current->next != NULL)
          {
              //if yes, we need to delete the current->next node
              if(current->next->data == key)
              {
                  temp = current->next;
                  //node will be disconnected from the linked list.
                  current->next = current->next->next;
                  free(temp);
                  break;
              }
              //Otherwise, move the current node and proceed
              else
                  current = current->next;
          }
      }
}

void print(struct node *head)
{
    struct node *temp = head;

    //iterate the entire linked list and print the data
    while(temp != NULL)
    {
         printf("%d ->", temp->data);
         temp = temp->next;
    }
    printf("NULL\n");
}

void main()
{
     struct node *head = NULL;


    //Let's create a men√π
    //1) Add node 2) Delete node
    //3) Print
    //-1) Exit the program
    //-2) Stop insertion of nodes
    //-3) Stop eliminating nodes


    printf("\n\t\tMenu'\n1)Add number\n2)Delete number\n3)Print list\n-3)Stop delete\n-2)Stop add\n-1)Exit\n\n%s","? ");

    int choice , value=0;
    scanf("%d", &choice);

  while (choice != -1) {

      switch (choice) {

         case 1:
             while(value!=-2) {


                     printf("%s", "Enter an integer: ");
                     scanf("%d", &value);
                 if(value!=-2) {
                     add(&head, value);
                 }
             }

            break;

         case 2:
            while(value!=-3) {
                printf("%s", "Enter an integer: ");
                scanf("%d", &value);
                delete(&head, value);
            }
            break;

         case 3:

         print(head);
         break;

         default:
            puts("Invalid choice.\n");
            break;
      }

      printf("\n\t\tMenu'\n1)Add number\n2)Delete number\n3)Print list\n-3)Stop delete\n-2)Stop add\n-1)Exit\n\n%s","? ");
      scanf("%u", &choice);
   }
   puts("End of run.");



}
